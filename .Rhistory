table.3.3.ssc[,5] <- as.numeric(as.character(table.3.3.ssc[,5]))
table.3.3.ssc[,6] <- as.numeric(as.character(table.3.3.ssc[,6]))
table.3.3.ssc[,6] <- as.numeric(as.character(table.3.3.ssc[,7]))
names(table.3.3.ssc) <- c("event.date", "peak.q.cms", "total.q.mm", "total.q.m3", "load.ton", "VWM", "EMC")  #set column names
table.3.3.ssc
table.3.1.ssc
rawq.ssc.model = lm(SSC.g.L ~ Q.cms, table.3.1.ssc)
rawq.ssc.model = lm(log10(SSC.g.L) ~ log10(Q.cms), table.3.1.ssc) #log-log
summary(rawq.ssc.model)
b = as.numeric(rawq.ssc.model$coefficients[1]) #y-int
a = as.numeric(rawq.ssc.model$coefficients[2]) #slope
x.num = c(0.1, 50)
x.num = c(0.1, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 4.77*x^0.45
10^b
a
table.3.1.ssc
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 8.06*x^0.17
reg.q.rawSSC = data.frame(cbind(x.num, y.num))
reg.q.rawSSC
q.ssc.model = lm(log10(EMC) ~ log10(total.q.mm), table.3.3.ssc) #log-log
summary(q.ssc.model)
b = as.numeric(q.ssc.model$coefficients[1]) #y-int
a = as.numeric(q.ssc.model$coefficients[2]) #slope
x.num = c(0.1, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 4.77*x^0.45
10^b
a
reg.q.EMC = data.frame(cbind(x.num, y.num))
q.load.model = lm(log10(load.ton) ~ log10(total.q.mm), table.3.3.ssc) #log-log
summary(q.load.model)
b = as.numeric(q.load.model$coefficients[1]) #y-int
a = as.numeric(q.load.model$coefficients[2]) #slope
x.num = c(0.1, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 51.47*x^1.52
reg.q.load = data.frame(cbind(x.num, y.num))
10^b
a
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L),  pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 8.06"~ x^{0.17}) #equation text to be added to plot
text(20, 10, text.eq1) #add equation to
x.num = c(0.01, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 4.77*x^0.45
rawq.ssc.model = lm(log10(SSC.g.L) ~ log10(Q.cms), table.3.1.ssc) #log-log
summary(rawq.ssc.model)
b = as.numeric(rawq.ssc.model$coefficients[1]) #y-int
a = as.numeric(rawq.ssc.model$coefficients[2]) #slope
x.num = c(0.01, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 8.06*x^0.17
reg.q.rawSSC = data.frame(cbind(x.num, y.num))
q.ssc.model = lm(log10(EMC) ~ log10(total.q.mm), table.3.3.ssc) #log-log
summary(q.ssc.model)
b = as.numeric(q.ssc.model$coefficients[1]) #y-int
a = as.numeric(q.ssc.model$coefficients[2]) #slope
x.num = c(0.1, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 4.77*x^0.45
reg.q.EMC = data.frame(cbind(x.num, y.num))
#Regression equation for Q-Load relationship
q.load.model = lm(log10(load.ton) ~ log10(total.q.mm), table.3.3.ssc) #log-log
summary(q.load.model)
b = as.numeric(q.load.model$coefficients[1]) #y-int
a = as.numeric(q.load.model$coefficients[2]) #slope
x.num = c(0.1, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 51.95*x^1.51
reg.q.load = data.frame(cbind(x.num, y.num))
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 8.06"~ x^{0.17}) #equation text to be added to plot
rawq.ssc.model = lm(log10(SSC.g.L) ~ log10(Q.cms), table.3.1.ssc) #log-log
summary(rawq.ssc.model)
b = as.numeric(rawq.ssc.model$coefficients[1]) #y-int
a = as.numeric(rawq.ssc.model$coefficients[2]) #slope
x.num = c(0.001, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 8.06*x^0.17
reg.q.rawSSC = data.frame(cbind(x.num, y.num))
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 8.06"~ x^{0.17}) #equation text to be added to plot
text(20, 10, text.eq1) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$EMC), log="xy", pch=16, cex = 1.5, ylab="Event-mean SSC (g/L)", xlab = "Total Q (mm)")
lines(reg.q.EMC$x.num, reg.q.EMC$y.num)
text.eq2 = expression("y = 4.77"~ x^{0.45}) #equation text to be added to plot
text(20, 10, text.eq2) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$load.ton), log="xy", pch=16, cex = 1.5,ylab="Suspended Sediment Load (tons)", xlab = "Total Q (mm)")
lines(reg.q.load$x.num, reg.q.load$y.num)
text.eq3 = expression("y = 51.47"~ x^{1.52}) #equation text to be added to plot
text(20, 2000, text.eq3)
table.3.1.ssc$Q.cms
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 8.06"~ x^{0.17}) #equation text to be added to plot
text(2, 4, text.eq1) #add equation to
text(2, 5, text.eq1) #add equation to
text(3, 5, text.eq1) #add equation to
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 8.06"~ x^{0.17}) #equation text to be added to plot
text(3, 5, text.eq1) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$EMC), log="xy", pch=16, cex = 1.5, ylab="Event-mean SSC (g/L)", xlab = "Total Q (mm)")
lines(reg.q.EMC$x.num, reg.q.EMC$y.num)
text.eq2 = expression("y = 4.77"~ x^{0.45}) #equation text to be added to plot
text(20, 10, text.eq2) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$load.ton), log="xy", pch=16, cex = 1.5,ylab="Suspended Sediment Load (tons)", xlab = "Total Q (mm)")
lines(reg.q.load$x.num, reg.q.load$y.num)
text.eq3 = expression("y = 51.47"~ x^{1.52}) #equation text to be added to plot
text(20, 2000, text.eq3)
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 8.06"~ x^{0.17}) #equation text to be added to plot
text(3, 5, text.eq1) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$EMC), log="xy", pch=16, cex = 1.5, ylab="Event-mean SSC (g/L)", xlab = "Total Q (mm)")
lines(reg.q.EMC$x.num, reg.q.EMC$y.num)
text.eq2 = expression("y = 4.77"~ x^{0.45}) #equation text to be added to plot
text(30, 10, text.eq2) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$load.ton), log="xy", pch=16, cex = 1.5,ylab="Suspended Sediment Load (tons)", xlab = "Total Q (mm)")
lines(reg.q.load$x.num, reg.q.load$y.num)
text.eq3 = expression("y = 51.47"~ x^{1.52}) #equation text to be added to plot
text(30, 2000, text.eq3)
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 8.06"~ x^{0.17}) #equation text to be added to plot
text(3, 5, text.eq1, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$EMC), log="xy", pch=16, cex = 1.5, ylab="Event-mean SSC (g/L)", xlab = "Total Q (mm)")
lines(reg.q.EMC$x.num, reg.q.EMC$y.num)
text.eq2 = expression("y = 4.77"~ x^{0.45}) #equation text to be added to plot
text(30, 10, text.eq2, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$load.ton), log="xy", pch=16, cex = 1.5,ylab="Suspended Sediment Load (tons)", xlab = "Total Q (mm)")
lines(reg.q.load$x.num, reg.q.load$y.num)
text.eq3 = expression("y = 51.47"~ x^{1.52}) #equation text to be added to plot
text(30, 2000, text.eq3, cex=1.5)
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 8.06"~ x^{0.17}) #equation text to be added to plot
text(3, 2.5, text.eq1, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$EMC), log="xy", pch=16, cex = 1.5, ylab="Event-mean SSC (g/L)", xlab = "Total Q (mm)")
lines(reg.q.EMC$x.num, reg.q.EMC$y.num)
text.eq2 = expression("y = 4.77"~ x^{0.45}) #equation text to be added to plot
text(30, 5, text.eq2, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$load.ton), log="xy", pch=16, cex = 1.5,ylab="Suspended Sediment Load (tons)", xlab = "Total Q (mm)")
lines(reg.q.load$x.num, reg.q.load$y.num)
text.eq3 = expression("y = 51.47"~ x^{1.52}) #equation text to be added to plot
text(30, 1000, text.eq3, cex=1.5)
(6805^1.15)/ (7000*206^0.38)
source("../EPA_Events_Report_TJ_LLCW_Scripts/function_calc_Q_mannings.R") #functions are saved in script directory
calculateQ.mannings(0.01,0.013)
(22326.12^1.15)/(7000*(676^0.38))
(22326.12^1.15)/(7700*(676^0.38))
calculateQ.mannings(0.02,0.013)
calculateQ.mannings(0.015,0.013)
calculateQ.mannings(0.005,0.013)
calculateQ.mannings(0.008,0.013)
source("../EPA_Events_Report_TJ_LLCW_Scripts/figure_2.07_storm2_PT_2015_03_01_KTedits04202017.R")
fname.sed = "ssc_2014-16.csv"
x.ssc = read.csv(fname.sed)
dates.ssc = strptime(x.ssc$Date,format="%m/%d/%Y, %I:%M:%S %p")
#Dataframe q.data.all is the usable observed data (timeseries of all the good data), PT data
names(q.data.all)
date.time = as.POSIXct(q.data.all$date.time) #date.time from obs data
q.cms = as.numeric(as.character(q.data.all[,2])) #q.data.all[,2] saved as factor, change to numeric
#plot Q timeseries taken from the previous script
par(oma=c(2,2,2,2),mar = c(4, 4, 0, 2))
xlimits = c(as.POSIXct(as.POSIXct("2015-03-01 00:00:00 PST")),as.POSIXct("2015-03-03 00:00:00 PST"))
xtics = seq(xlimits[1],xlimits[2],by=3600*2) #every 2 minutes
xlabels = format(xtics,"%m-%d %H:%M")
plot(date.time, q.cms, type ="l", xlab = "", ylab = "Discharge (cms)", xaxt = "n",xlim=xlimits)
axis(side = 1, date.time,at=xtics,labels=xlabels,las=2)
par(new=T)
plot(dates.ssc,x.ssc$g.l,yaxt="n",xlim=xlimits,xlab="",ylab="",pch=20,cex=2)
axis(side=4)
mtext("SSC g/l",side = 4, line = 3)
###############################################################################################################
#find discharge at time that SSC was collected
#find time of SSC samples #sample1, E1
ftime = date.time
target.time = as.POSIXct("2015-03-01 07:20:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime = ftime-target.time
index = which(difftime==min(abs(difftime)))
match.data = q.cms[index]
q.cms[(index):(index+10)]
obs$date.time[index]
q.data.all[index,] #E1
#find time of SSC samples #sample2, E1
target.time2 = as.POSIXct("2015-03-01 12:40:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime2 = ftime-target.time2
index2 = which(difftime2==min(abs(difftime2)))
match.data = c(match.data, q.cms[index2])
q.cms[(index2):(index2+10)]
date.time[index2]
q.data.all[index2,] #E1
#find time of SSC samples #sample3, E1
target.time3 = as.POSIXct("2015-03-01 17:45:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime3 = ftime-target.time3
index3 = which(difftime3==min(abs(difftime3)))
match.data = c(match.data, q.cms[index3])
q.cms[(index3):(index3+10)]
date.time[index3]
q.data.all[index3,] #E1
#find time of SSC samples #sample4, E2
target.time4 = as.POSIXct("2015-03-02 08:40:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime4 = ftime-target.time4
index4 = which(difftime4==min(abs(difftime4)))
match.data = c(match.data, q.cms[index4])
q.cms[(index4):(index4+10)]
date.time[index4]
q.data.all[index4,] #E2
###############################################################################################################
#Summary data for Table 3.1:
match.data #the discharge at time of SSC collection
ssc.date.time = c(target.time, target.time2, target.time3, target.time4)  #the date.time of SSC collecction
ssc = x.ssc$g.l[3:6]
EMC = mean(ssc)
storm = "Storm 2"
Event = c("E1", "E1", "E1","E2")
#one value has Q=0, set Q as minimum value that corresponds to 5cm stage
source("../EPA_Events_Report_TJ_LLCW_Scripts/function_calc_Q_mannings.R") #function to calculate Q based on stage and manning's n
q.2cm = calculateQ.mannings(0.02, 0.013) #5cm depth, 0.013 manning's n
q.2cm
match.data
match.data[match.data < 0.07] <- q.5cm
match.data[match.data < 0.07] <- q.2cm
match.data
q.2cm
source("../EPA_Events_Report_TJ_LLCW_Scripts/figure_2.15_storm6_PT_2016_03b_KTedits04172017.R")
#Dataframe q.data.all is the usable observed data (timeseries of all the good data)
names(q.data.all)
date.time = as.POSIXct(q.data.all$date.time) #date.time from obs data
q.cms = as.numeric(as.character(q.data.all[,2])) #q.data.all[,2] saved as factor, change to numeric
#SSC Data --> by Napo
# Load SSC data
fname.sed = "ssc_2014-16.csv"
x.ssc = read.csv(fname.sed)
dates.ssc = strptime(x.ssc$Date,format="%m/%d/%Y, %I:%M:%S %p")
#plot Q timeseries
par(oma=c(2,2,2,2))
xlimits = c(as.POSIXct(as.POSIXct("2016-03-06 00:00:00 PST")),as.POSIXct("2016-03-08 10:07:00 PST"))
xtics = seq(xlimits[1],xlimits[2],by=3600)
xlabels = format(xtics,"%m-%d %H:%M")
plot(date.time, q.cms, type ="l", xlab = "Date", ylab = "Discharge (cms)", xaxt = "n",xlim =xlimits)
axis.POSIXct(side = 1, date.time, format = "%Y-%m-%d")
par(new=T)
plot(dates.ssc,x.ssc$g.l,yaxt="n",xlim=xlimits,xlab="",ylab="",pch=20,cex=2)
axis(side=4)
mtext("SSC g/l",side = 4, line = 3)
#tabla con valores de Q                                                         << ==== NAPO ====== >>>
write.csv(data.frame(date.time, q.cms), file = "q_data_march2016.csv",row.names=FALSE, na="")
###############################################################################################################
#find time of SSC samples #sample1, E1
ftime = date.time
target.time = as.POSIXct("2016-03-06 09:40:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime = ftime-target.time
index = which(difftime==min(abs(difftime)))
match.data = q.cms [index]
q.cms [index]
date.time[index]
q.data.all[index,] #E1
#find time of SSC samples #sample2, E1
target.time2 = as.POSIXct("2016-03-06 12:00:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime = ftime-target.time2
index2 = which(difftime==min(abs(difftime)))
match.data = c(match.data, q.cms[index2])
q.cms [index2]
date.time[index2]
q.data.all[index2,] #E1
#find time of SSC samples #sample3
target.time3 = as.POSIXct("2016-03-06 15:45:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime = ftime-target.time3
index3 = which(difftime==min(abs(difftime)))
match.data =  c(match.data, q.cms[index3])
q.cms[index3]
obs$date.time[index3]
q.data.all[index3,] #E1
#find time of SSC samples #sample4, E2
target.time4 = as.POSIXct("2016-03-07 06:00:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime = ftime-target.time4
index4 = which(difftime==min(abs(difftime)))
match.data =  c(match.data, q.cms[index4])
q.cms [index4]
obs$date.time[index4]
q.data.all[index4,] #E2
#find time of SSC samples #sample5, E2
target.time5 = as.POSIXct("2016-03-07 07:00:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime = ftime-target.time5
index5 = which(difftime==min(abs(difftime)))
match.data0 = approx(date.time, q.cms, target.time5) #interpolate the discharge at specified time
match.data = c(match.data, match.data0$y)
q.data.all[index5,] #E2
#find time of SSC samples #sample6, E2
target.time6 = as.POSIXct("2016-03-07 12:00:00",format="%Y-%m-%d %H:%M:%S")  # date and time # of the SSC sample
difftime = ftime-target.time6
match.data0 = approx(date.time, q.cms, target.time6) #interpolate the discharge at specified time
match.data = c(match.data, match.data0$y)
###############################################################################################################
#Summary data for Table 3.1:
match.data  #the discharge at time of SSC collection
ssc.date.time = c(target.time, target.time2, target.time3, target.time4, target.time5, target.time6) #the date.time of SSC collecction
ssc = x.ssc$g.l[8:13]
EMC = mean(ssc)
storm = "Storm 6"
Event = c("E1", "E1","E1","E2","E2","E2")
#three values have Q<0.07, set Q as minimum value that corresponds to 2cm stage
source("../EPA_Events_Report_TJ_LLCW_Scripts/function_calc_Q_mannings.R") #function to calculate Q based on stage and manning's n
q.2cm = calculateQ.mannings(0.02, 0.013) #2cm depth, 0.013 manning's n
match.data[match.data < q.2cm] <- q.2cm
match.data
script.dir= '../EPA_Events_Report_TJ_LLCW_Scripts/' #directory where scripts are saved
###############################################################################################################
#list all of the SSC scripts
flist2 = c("Figure_3.2_EventsReport_SSC_03012014.R",
"Figure_3.3_EventsReport_SSC_03012015.R",
"Figure_3.4_EventsReport_SSC_05152015.R",
"Figure_3.5_EventsReport_SSC_03062016.R",
"Figure_3.6_EventsReport_SSC_02172017.R",
"Figure_3.7_EventsReport_SSC_02272017.R")
table.3.1.out = data.frame(matrix(nrow=1, ncol=4)) #empty dataframe to put the values in from obs.summary.PT.IBWC
names(table.3.1.out) <- c("Date", "SSC (g/L)", "Q (cms)", "Event")
table.3.3.out =  data.frame(matrix(nrow=1, ncol=7))
names(table.3.3.out) <- c("event.date", "peak.q.cms", "total.q.mm", "total.q.m3", "load.ton", "VWM", "EMC")
Storm.out = NA
for (i in 1:length(flist2)) {
source(paste(script.dir,flist2[i], sep = ""))
#append the obs.summary.PT.IBWC to the summary.out dataframe from each storm
EMC.out = c("EMC", EMC, "","")
table.3.1.out = rbind(table.3.1.out, table.3.1.export, EMC.out)
table.3.3.out = rbind(table.3.3.out, table.3.3.export) #only the usable data (A rating)
Storm.out = c(Storm.out, storm)
}
###############################################################################################################
#New summary tables
table.3.1 = table.3.1.out[2:length(table.3.1.out$Date),]
names(table.3.1) <- c("Date", "SSC (g/L)", "Q (cms)", "Event")
table.3.3 = table.3.3.out[2:length(table.3.3.out$event.date),]
names(table.3.3) <- c("event.date", "peak.q.cms", "total.q.mm", "total.q.m3", "load.ton", "VWM", "EMC")
Storm.out = Storm.out[2:length(Storm.out)]
###############################################################################################################
#Export new tables into .csv
fname.3.1 = "summary_table.3.1.csv"
write.csv(table.3.1, file=fname.3.1, row.names=F)
fname.3.3 = "summary_table.3.3.csv"
write.csv(table.3.3 , file=fname.3.3, row.names=F)
#see table.3.1_cal_format.R for html formatting of table in report
table.3.3
table.3.3.ssc = read.csv("summary_table.3.3.csv") #table with both IBWC and PT data
###############################################################################################################
#HTML Tables
library(htmlTable)
#Format html table for PT & IBWC data all
#Create dataframes, make sure all classes of numeric are set for rounding values
table.3.3.ssc.df = data.frame(table.3.3.ssc)
#Round the values
round1 = txtRound(table.3.3.ssc.df[,2:7],2) #round the numeric columns
round2 = round(table.3.3.ssc.df[,4],0)
round3 = round(table.3.3.ssc.df[,5],1)
#Column of n number of SSC samples
n.ssc = c(1,1,3,1,1,3,3,3,1)
table.3.3.final = data.frame(cbind(as.character(table.3.3.ssc.df[,1]), n.ssc,  round1[,1], round1[,2], round2, round3, round1[,5], round1[,6]))
names(table.3.3.final) <- c("Event Date*", "n SSC Samples", "Peak Q", "Total Q (mm) ", "Total Q (m3)", "Load (tons)", "Volume weighted mean concentration (g/L)", "EMC")
#set the text columns as as.character
table.3.3.final[,1] <- as.character(table.3.3.final[,1])
table.3.3.final[,2] <- as.character(table.3.3.final[,2])
table.3.3.final[,3] <- as.character(table.3.3.final[,3])
table.3.3.final[,4] <- as.character(table.3.3.final[,4])
table.3.3.final[,5] <- as.character(table.3.3.final[,5])
table.3.3.final[,6] <- as.character(table.3.3.final[,6])
table.3.3.final[,7] <- as.character(table.3.3.final[,7])
table.3.3.final[,8] <- as.character(table.3.3.final[,8])
table.3.3.SSC.tableout = htmlTable(table.3.3.final,
rnames = rep("", times=length(table.3.3.ssc.df[,1])), #no row names
header = c("", "SSC Samples", "cms", "mm", "m3", "tons", "g/L", "g/L"),
cgroup = c("Event Date*", "n", "Peak Q", "Total Q", "Load", "Volume weighted mean concentration", "Event Mean Concentration"),
n.cgroup = c(1, 1,1,2, 1, 1,1),
caption="Table 3.3.  Total event suspended sediment load at the PT location for the events with SSC data. Drainage area is 10.23 km2 at the observation point.")
print(table.3.3.SSC.tableout)
table.3.1.ssc.all = read.csv("summary_table.3.1.csv") #table with both IBWC and PT data
#exclude all rows that have EMC
table.3.1.ssc = table.3.1.ssc.all[-c(3,8,10,17,21,23),]
#set value columns to numeric, create new dataframe to run regression
table.3.1.ssc[,2] <- as.numeric(as.character(table.3.1.ssc[,2])) #ssc raw
table.3.1.ssc[,3] <- as.numeric(as.character(table.3.1.ssc[,3])) #instantaneous Q
names(table.3.1.ssc) <- c("Date","SSC.g.L", "Q.cms", "Event")  #set column names
#Read in the tables generated from Table 3.3 (for second and third plot)
table.3.3.ssc = read.csv("summary_table.3.3.csv") #table with both IBWC and PT data
#set value columns to numeric, create new dataframe to run regression
table.3.3.ssc[,2] <- as.numeric(as.character(table.3.3.ssc[,2]))
table.3.3.ssc[,3] <- as.numeric(as.character(table.3.3.ssc[,3]))
table.3.3.ssc[,4] <- as.numeric(as.character(table.3.3.ssc[,4]))
table.3.3.ssc[,5] <- as.numeric(as.character(table.3.3.ssc[,5]))
table.3.3.ssc[,6] <- as.numeric(as.character(table.3.3.ssc[,6]))
table.3.3.ssc[,6] <- as.numeric(as.character(table.3.3.ssc[,7]))
names(table.3.3.ssc) <- c("event.date", "peak.q.cms", "total.q.mm", "total.q.m3", "load.ton", "VWM", "EMC")  #set column names
###############################################################################################################
#Regression equation for raw ssc and instantaneous q relationship
rawq.ssc.model = lm(log10(SSC.g.L) ~ log10(Q.cms), table.3.1.ssc) #log-log
summary(rawq.ssc.model)
b = as.numeric(rawq.ssc.model$coefficients[1]) #y-int
a = as.numeric(rawq.ssc.model$coefficients[2]) #slope
x.num = c(0.001, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 8.06*x^0.17
reg.q.rawSSC = data.frame(cbind(x.num, y.num))
rawq.ssc.model = lm(log10(SSC.g.L) ~ log10(Q.cms), table.3.1.ssc) #log-log
summary(rawq.ssc.model)
b = as.numeric(rawq.ssc.model$coefficients[1]) #y-int
a = as.numeric(rawq.ssc.model$coefficients[2]) #slope
x.num = c(0.01, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 8.06*x^0.17
b
(10^b)
a
q.ssc.model = lm(log10(EMC) ~ log10(total.q.mm), table.3.3.ssc) #log-log
summary(q.ssc.model)
b = as.numeric(q.ssc.model$coefficients[1]) #y-int
a = as.numeric(q.ssc.model$coefficients[2]) #slope
x.num = c(0.1, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 4.77*x^0.45
reg.q.EMC = data.frame(cbind(x.num, y.num))
10^b
q.load.model = lm(log10(load.ton) ~ log10(total.q.mm), table.3.3.ssc) #log-log
summary(q.load.model)
b = as.numeric(q.load.model$coefficients[1]) #y-int
a = as.numeric(q.load.model$coefficients[2]) #slope
x.num = c(0.1, 50)
y.num =  (10^b)*(x.num^a)         #y = 10^b*x^a , y = 51.95*x^1.51
reg.q.load = data.frame(cbind(x.num, y.num))
a
10^b
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 10.81"~ x^{0.32}) #equation text to be added to plot
text(3, 2.5, text.eq1, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$EMC), log="xy", pch=16, cex = 1.5, ylab="Event-mean SSC (g/L)", xlab = "Total Q (mm)")
lines(reg.q.EMC$x.num, reg.q.EMC$y.num)
text.eq2 = expression("y = 4.77"~ x^{0.45}) #equation text to be added to plot
text(30, 5, text.eq2, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$load.ton), log="xy", pch=16, cex = 1.5,ylab="Suspended Sediment Load (tons)", xlab = "Total Q (mm)")
lines(reg.q.load$x.num, reg.q.load$y.num)
text.eq3 = expression("y = 51.61"~ x^{1.52}) #equation text to be added to plot
text(30, 1000, text.eq3, cex=1.5)
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 10.81"~ x^{0.32}) #equation text to be added to plot
text(4, 2.5, text.eq1, cex=1.5) #add equation to
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 10.81"~ x^{0.32}) #equation text to be added to plot
text(4, 2.5, text.eq1, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$EMC), log="xy", pch=16, cex = 1.5, ylab="Event-mean SSC (g/L)", xlab = "Total Q (mm)")
lines(reg.q.EMC$x.num, reg.q.EMC$y.num)
text.eq2 = expression("y = 4.77"~ x^{0.45}) #equation text to be added to plot
text(30, 5, text.eq2, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$load.ton), log="xy", pch=16, cex = 1.5,ylab="Suspended Sediment Load (tons)", xlab = "Total Q (mm)")
lines(reg.q.load$x.num, reg.q.load$y.num)
text.eq3 = expression("y = 51.61"~ x^{1.52}) #equation text to be added to plot
text(30, 1000, text.eq3, cex=1.5)
layout(matrix(1:3, ncol = 1), widths = 2, respect = FALSE)
par(mar = c(4, 4.1, 0, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.1.ssc$Q.cms), as.numeric(table.3.1.ssc$SSC.g.L), log="xy", pch=16, cex = 1.5, ylab="Grab Sample SSC (g/L)", xlab = "Instantaneous Q (cms)")
lines(reg.q.rawSSC$x.num, reg.q.rawSSC$y.num)
text.eq1 = expression("y = 10.81"~ x^{0.32}) #equation text to be added to plot
text(3.5, 2.5, text.eq1, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$EMC), log="xy", pch=16, cex = 1.5, ylab="Event-mean SSC (g/L)", xlab = "Total Q (mm)")
lines(reg.q.EMC$x.num, reg.q.EMC$y.num)
text.eq2 = expression("y = 4.77"~ x^{0.45}) #equation text to be added to plot
text(30, 5, text.eq2, cex=1.5) #add equation to
par(mar = c(4, 4.1, 1, 0.1)) #set margins for bottom, L, top, R
plot(as.numeric(table.3.3.ssc$total.q.mm), as.numeric(table.3.3.ssc$load.ton), log="xy", pch=16, cex = 1.5,ylab="Suspended Sediment Load (tons)", xlab = "Total Q (mm)")
lines(reg.q.load$x.num, reg.q.load$y.num)
text.eq3 = expression("y = 51.61"~ x^{1.52}) #equation text to be added to plot
text(30, 1000, text.eq3, cex=1.5)
summary(rawq.ssc.model)
